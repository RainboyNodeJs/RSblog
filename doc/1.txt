[ WARNING ]:tags type is not array!! post title:C++输入输出讲解
{ title: 'C++输入输出讲解',
  isHave: true,
  date: Sun Mar 27 2016 08:37:00 GMT+0800 (中国标准时间),
  update: Sun Mar 27 2016 08:37:00 GMT+0800 (中国标准时间),
  _content: '##说明 \n\n我们使用的是C++语言,C++语言是对C语言的拓展,主要加上的是面对对象的部分,它的输出的风格是`cin`和`cout`.C++语言为了保持对C语言的兼容,同时也有C风格的的输入输出`scanf`,`printf`.\n\n在具体的学习中,我是更倾向使用`scanf`,`printf`,这里的原因和风格有一定关系,但是最重要的是:**在以完成题目的为前提下,选一个简单的来用,keep it simple and stupid**\n\n下面我会把这两种风格都说一下:\n\n\n\n\n## C++中C风格的的输入输出\n\n### 先来一点预备知识\n\n前面的学习我们已经知道`` `A` ``,这样被单引号括表示的是字符,`` "hello world" ``这样被又引号括起来是是字符串,所谓的`字符串`就是`字符`的组合,这样可以产生一些有意义的语句了.\n\n我们平常写的代码,想要输出的东西就是一串字符,输出到console上(就是那个黑色的框框).那我们怎么用C风格来输出呢?\n\n```\nprintf("hello word!");\n```\n\n当然我们要引入C风格头文件`#include <cstdio>`.上面的是最简单的输出,不好的地方就是每一次的输出都一样,如果我们想要让输出按我们的意思输出怎么办?比较输出`int a=10;`这种变量的值怎么办?\n\n\n### C风格 格式化输出 printf\n\nprintf调用:\n\n<center> ** printf("格式化字符串",参数表)</center>\n\n格式化字符:\n\n<center>%[标志][输出最小宽度][.精度][长度]格式化字符</center>\n\n更标准一点的说法:\n\n<center>%[flags][width][.prec][F|N|h|i]type</center>\n\n\n简单的例子:\n\n```\nprintf("%1.2f",11.11111)\n\n```\n\n得到的答案是`1.11`,因为我们规定了输出的width是1,prec是2,那余的东西就会被丢掉.下面看表格:\n\n\n| flags | 名称   | 作用                                                                                               |\n|-------|--------|----------------------------------------------------------------------------------------------------|\n| -     | 左对齐 | 右边填充空格(默认右对齐)                                                                           |\n| +     | 加号   | 在数字前增加符号 + 或 -                                                                            |\n| 0     | 数字零 | 将输出的前面补上0，直到占满指定列宽为止（不可以搭配使用“-”）                                       |\n| 　    | 空格   | 输出值为正时加上空格，为负时加上负号                                                               |\n| #     | 井号   | type是o、x、X时，增加前缀0、0x、0X,type是e、E、f、g、G时，一定使用小数点,type是g、G时，尾部的0保留 |\n\n\n| type | 对应的数据类型 | 作用                                     |\n|------|----------------|------------------------------------------|\n| d    | int            | 接受整数值并将它表示为有符号的十进制整数 |\n| lld  | long long      | 同上,但是表示64bit的long long            |\n| x    | unsiged int    | 小写16进制                               |\n| X    | unsiged int    | 大写16进制                               |\n| o    | unsiged int    | 8进制                                    |\n| u    | unsiged int    | 无符号10进制                             |\n| f    | float          | 单精度浮点数                             |\n| lf   | double         | 双精度浮点数                             |\n| s    | char *         | 字符串                                   |\n\n\nwidth:\n是一个可选的指定最小值字段宽度的十进制数字字符串。如果转换值字符少于字段宽度，该字段将从左到右按指定的字段宽度填充。如果指定了左边调整选项，字段将在右边填充。如果转换结果宽于字段宽度，将扩展该字段以包含转换后的结果。不会发生截断。然而，小的精度可能导致在右边发生截断。\n\nprec:\n用于控制小数点后面的位数，取值和含义如下：缺省精度0,其它精度n(1,2,3,4...)\n\n| 转义字符 | 作用                       |\n|----------|----------------------------|\n| \\n       | 换行                       |\n| \\\\       | 一个\\                      |\n| \\\'       | 一个\'                      |\n| \\"       | 一个"                      |\n| \\xhh     | hh二位的16进制所代表的字符 |\n\n\n > **注意:** 上面说了那么多,是不是都要记住,不要,我们只要知道有这些东西就行了,具休只要下面的代码有看懂就行\n\n\n#### 代码举例\n\n```\n#include <cstdio>\nint main(){\n    double a=1123.123456;\n    int b =12;\n    printf("%6.2f\\n",a);\n    printf("%d\\n",b);\n    printf("%4d\\n",b);\n    printf("%-4d\\n",b);\n    printf("%04d\\n",b);\n    printf("%4.4d\\n",b);\n    printf("my favrite num is :%d\\n",9);\n    printf("%03d %c,%f hh %s",12,\'A\',1.1,"RAINBOY");\n    return 0;\n}\n```\n\n结果是\n\n```\n1123.12\n12\n  12\n12\n0012\n0012\nmy favrite num is :9\n012 A,1.100000 hh RAINBOY\n```\n\n\n### scanf 的使用\n scanf() 是从标准输入流stdio (标准输入设备，一般是键盘)中读内容的通用子程序，可以说明的格式读入多个字符，并保存在对应地址的变量中。[\n\n 调用方式:\n\n<center>scanf("参数表",变量地址)</center>\n\n 简单的来说就是从console里读取,下面几个问题我们要知道:\n\n - %d读取的时候会把不可见的字符略去\n - 你在console输入数据的时候,按下回车的时候,才把数据提交\n - 定 %d%d%d 之间最好不要有其它东西\n\n\n#### 代码\n\n```\n#include<stdio>\nint main(void)\n{\nint a,b,c;\nprintf("输入a,b,c\\n");\nscanf("%d%d%d",&a,&b,&c);\nprintf("a=%d,b=%d,c=%d\\n",a,b,c);\nreturn 0;\n}\n```\n\n基本会写上面的这个代码就会能写90%以上的题目了,如果在写题目真的遇到了怎么办?看这个[百度百科](http://baike.baidu.com/link?url=1f3edcVHlc0ey2QsxEHi9zDDB8HwwYWmXMUgP0HZM1CDDE-PD5Yr8mUV5dTDlJAI8kaiu2hDHACfLOh3avWQS_)\n\n下面的这些要撑握:\n\n1.读取到文件地末尾:\n\n2.读取一行字符:\n\n3.读取一行数字:\n\n## cin cout 的使用\n\n要包含头文件:`<iostream>`,要写这句话:`using namespace std;`\n\n\ncout语句的一般格式为：`cout<<表达式1<<表达式2<<……<<表达式n;`\n\ncin语句的一般格式为：`cin>>变量1>>变量2>>……>>变量n;`\n\n这里说一下对理解:把cout想像成cout 想象成console, `<<`表示一个流向,会把数据流向cout,而cout就是console,现时`<<`操作完后会返回cout,所以可以写成一个长链,cin同理,只不过把cin当成键盘.\n\n与printf相比,如果我想输出一行话,只要写一个长链串起来就可以了.\n\n```\ncout << "hello word" << 10 << \' \' << endl;\n```\n\n### cin cout 控制符\n\n`#include <iomanip>`\n\n\n| cout 控制         |                        |\n| ----------------- | ---------------------- |\n| dec               | %d                     |\n| hex               | %x                     |\n| oct               | %o                     |\n| setfill(\'c\')      | 填充字符为c            |\n| setw(n)           | 宽度为n                |\n| setprecision(b)   | 浮点数小数部分长度为n  |\n\n#### 代码\n\n```\n/*一个按进制输出的例子*/\n\n#include<iostream.h>\n\nvoid main()\n\n{\n\nint x=30, y=300, z=1024;\n\ncout<<x<<\' \'<<y<<\' \'<<z<<endl; //按十进制输出\n\ncout.unsetf(ios::dec ); //取消十进制输出设置\n\ncout.setf(ios::showbase | ios::uppercase); //设置基指示符输出和数值中的字母大写输出\n\ncout<<x<<\' \'<<y<<\' \'<<z<<endl;\n\ncout.unsetf(ios::showbase | ios::uppercase); //取消基指示符输出和数值中的字母大写输出\n\ncout.setf(ios::oct); //设置为八进制输出,此设置不取消一直有效\n\ncout<<x<<\' \'<<y<<\' \'<<z<<endl; //按八进制输出\n\ncout.setf(ios::showbase | ios::uppercase); //设置基指示符输出和数值中的字母大写输出\n\ncout<<x<<\' \'<<y<<\' \'<<z<<endl;\n\ncout.unsetf(ios::showbase | ios::uppercase); //取消基指示符输出和数值中的字母大写输出\n\ncout.unsetf(ios::oct); //取消八进制输出设置，恢复按十进制输出\n\ncout.setf(ios::hex); //设置为十六进制输出\n\ncout<<x<<\' \'<<y<<\' \'<<z<<endl;\n\ncout.setf(ios::showbase | ios::uppercase); //设置基指示符输出和数值中的字母大写输出\n\ncout<<x<<\' \'<<y<<\' \'<<z<<endl;\n\ncout.unsetf(ios::showbase | ios::uppercase); //取消基指示符输出和数值中的字母大写输出\n\ncout.unsetf(ios::hex); //取消十六进制输出设置，恢复按十进制输出\n\ncout<<x<<\' \'<<y<<\' \'<<z<<endl;\n\n} \n```\n\n\n##FAQ:算法竞赛的时候用cin cout输入输出比用scanf printf慢多少？\n\n - https://www.zhihu.com/question/27831271/answer/38379464\n - https://www.byvoid.com/blog/fast-readfile\n\n## 要善用网络\n\n',
  content: '<p>##说明 </p>\n<p>我们使用的是C++语言,C++语言是对C语言的拓展,主要加上的是面对对象的部分,它的输出的风格是<code>cin</code>和<code>cout</code>.C++语言为了保持对C语言的兼容,同时也有C风格的的输入输出<code>scanf</code>,<code>printf</code>.</p>\n<p>在具体的学习中,我是更倾向使用<code>scanf</code>,<code>printf</code>,这里的原因和风格有一定关系,但是最重要的是:<strong>在以完成题目的为前提下,选一个简单的来用,keep it simple and stupid</strong></p>\n<p>下面我会把这两种风格都说一下:</p>\n<h2 id="c-中c风格的的输入输出">C++中C风格的的输入输出</h2>\n<h3 id="先来一点预备知识">先来一点预备知识</h3>\n<p>前面的学习我们已经知道<code>`A` </code>,这样被单引号括表示的是字符,<code>&quot;hello world&quot;</code>这样被又引号括起来是是字符串,所谓的<code>字符串</code>就是<code>字符</code>的组合,这样可以产生一些有意义的语句了.</p>\n<p>我们平常写的代码,想要输出的东西就是一串字符,输出到console上(就是那个黑色的框框).那我们怎么用C风格来输出呢?</p>\n<pre><code><span class="hljs-built_in">printf</span>(<span class="hljs-string">"hello word!"</span>);\n</code></pre><p>当然我们要引入C风格头文件<code>#include &lt;cstdio&gt;</code>.上面的是最简单的输出,不好的地方就是每一次的输出都一样,如果我们想要让输出按我们的意思输出怎么办?比较输出<code>int a=10;</code>这种变量的值怎么办?</p>\n<h3 id="c风格-格式化输出-printf">C风格 格式化输出 printf</h3>\n<p>printf调用:</p>\n<center> ** printf(&quot;格式化字符串&quot;,参数表)</center>\n\n<p>格式化字符:</p>\n<center>%[标志][输出最小宽度][.精度][长度]格式化字符</center>\n\n<p>更标准一点的说法:</p>\n<center>%[flags][width][.prec][F|N|h|i]type</center>\n\n\n<p>简单的例子:</p>\n<pre><code><span class="hljs-function"><span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">"%1.2f"</span>,<span class="hljs-number">11.11111</span>)</span></span>\n</code></pre><p>得到的答案是<code>1.11</code>,因为我们规定了输出的width是1,prec是2,那余的东西就会被丢掉.下面看表格:</p>\n<table>\n<thead>\n<tr>\n<th>flags</th>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-</td>\n<td>左对齐</td>\n<td>右边填充空格(默认右对齐)</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加号</td>\n<td>在数字前增加符号 + 或 -</td>\n</tr>\n<tr>\n<td>0</td>\n<td>数字零</td>\n<td>将输出的前面补上0，直到占满指定列宽为止（不可以搭配使用“-”）</td>\n</tr>\n<tr>\n<td>　</td>\n<td>空格</td>\n<td>输出值为正时加上空格，为负时加上负号</td>\n</tr>\n<tr>\n<td>#</td>\n<td>井号</td>\n<td>type是o、x、X时，增加前缀0、0x、0X,type是e、E、f、g、G时，一定使用小数点,type是g、G时，尾部的0保留</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>对应的数据类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>int</td>\n<td>接受整数值并将它表示为有符号的十进制整数</td>\n</tr>\n<tr>\n<td>lld</td>\n<td>long long</td>\n<td>同上,但是表示64bit的long long</td>\n</tr>\n<tr>\n<td>x</td>\n<td>unsiged int</td>\n<td>小写16进制</td>\n</tr>\n<tr>\n<td>X</td>\n<td>unsiged int</td>\n<td>大写16进制</td>\n</tr>\n<tr>\n<td>o</td>\n<td>unsiged int</td>\n<td>8进制</td>\n</tr>\n<tr>\n<td>u</td>\n<td>unsiged int</td>\n<td>无符号10进制</td>\n</tr>\n<tr>\n<td>f</td>\n<td>float</td>\n<td>单精度浮点数</td>\n</tr>\n<tr>\n<td>lf</td>\n<td>double</td>\n<td>双精度浮点数</td>\n</tr>\n<tr>\n<td>s</td>\n<td>char *</td>\n<td>字符串</td>\n</tr>\n</tbody>\n</table>\n<p>width:\n是一个可选的指定最小值字段宽度的十进制数字字符串。如果转换值字符少于字段宽度，该字段将从左到右按指定的字段宽度填充。如果指定了左边调整选项，字段将在右边填充。如果转换结果宽于字段宽度，将扩展该字段以包含转换后的结果。不会发生截断。然而，小的精度可能导致在右边发生截断。</p>\n<p>prec:\n用于控制小数点后面的位数，取值和含义如下：缺省精度0,其它精度n(1,2,3,4...)</p>\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>一个\\</td>\n</tr>\n<tr>\n<td>\\&#39;</td>\n<td>一个&#39;</td>\n</tr>\n<tr>\n<td>\\&quot;</td>\n<td>一个&quot;</td>\n</tr>\n<tr>\n<td>\\xhh</td>\n<td>hh二位的16进制所代表的字符</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>注意:</strong> 上面说了那么多,是不是都要记住,不要,我们只要知道有这些东西就行了,具休只要下面的代码有看懂就行</p>\n</blockquote>\n<h4 id="代码举例">代码举例</h4>\n<pre><code><span class="hljs-comment">#include &lt;cstdio&gt;</span>\n<span class="hljs-keyword">int</span> main(){\n    double a=<span class="hljs-number">1123.123456</span>;\n    <span class="hljs-keyword">int</span> b =<span class="hljs-number">12</span>;\n    <span class="hljs-keyword">printf</span>(<span class="hljs-string">"%6.2f\\n"</span>,a);\n    <span class="hljs-keyword">printf</span>(<span class="hljs-string">"%d\\n"</span>,b);\n    <span class="hljs-keyword">printf</span>(<span class="hljs-string">"%4d\\n"</span>,b);\n    <span class="hljs-keyword">printf</span>(<span class="hljs-string">"%-4d\\n"</span>,b);\n    <span class="hljs-keyword">printf</span>(<span class="hljs-string">"%04d\\n"</span>,b);\n    <span class="hljs-keyword">printf</span>(<span class="hljs-string">"%4.4d\\n"</span>,b);\n    <span class="hljs-keyword">printf</span>(<span class="hljs-string">"my favrite num is :%d\\n"</span>,<span class="hljs-number">9</span>);\n    <span class="hljs-keyword">printf</span>(<span class="hljs-string">"%03d %c,%f hh %s"</span>,<span class="hljs-number">12</span>,<span class="hljs-string">\'A\'</span>,<span class="hljs-number">1.1</span>,<span class="hljs-string">"RAINBOY"</span>);\n    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;\n}\n</code></pre><p>结果是</p>\n<pre><code>1123<span class="hljs-selector-class">.12</span>\n12\n  12\n12\n0012\n0012\n<span class="hljs-selector-tag">my</span> <span class="hljs-selector-tag">favrite</span> <span class="hljs-selector-tag">num</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-pseudo">:9</span>\n012 <span class="hljs-selector-tag">A</span>,1<span class="hljs-selector-class">.100000</span> <span class="hljs-selector-tag">hh</span> <span class="hljs-selector-tag">RAINBOY</span>\n</code></pre><h3 id="scanf-的使用">scanf 的使用</h3>\n<p> scanf() 是从标准输入流stdio (标准输入设备，一般是键盘)中读内容的通用子程序，可以说明的格式读入多个字符，并保存在对应地址的变量中。[</p>\n<p> 调用方式:</p>\n<center>scanf(&quot;参数表&quot;,变量地址)</center>\n\n<p> 简单的来说就是从console里读取,下面几个问题我们要知道:</p>\n<ul>\n<li>%d读取的时候会把不可见的字符略去</li>\n<li>你在console输入数据的时候,按下回车的时候,才把数据提交</li>\n<li>定 %d%d%d 之间最好不要有其它东西</li>\n</ul>\n<h4 id="代码">代码</h4>\n<pre><code><span class="hljs-comment">#include&lt;stdio&gt;</span>\n<span class="hljs-keyword">int</span> main(void)\n{\n<span class="hljs-keyword">int</span> a,b,c;\n<span class="hljs-keyword">printf</span>(<span class="hljs-string">"输入a,b,c\\n"</span>);\nscanf(<span class="hljs-string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);\n<span class="hljs-keyword">printf</span>(<span class="hljs-string">"a=%d,b=%d,c=%d\\n"</span>,a,b,c);\n<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;\n}\n</code></pre><p>基本会写上面的这个代码就会能写90%以上的题目了,如果在写题目真的遇到了怎么办?看这个<a href="http://baike.baidu.com/link?url=1f3edcVHlc0ey2QsxEHi9zDDB8HwwYWmXMUgP0HZM1CDDE-PD5Yr8mUV5dTDlJAI8kaiu2hDHACfLOh3avWQS_">百度百科</a></p>\n<p>下面的这些要撑握:</p>\n<p>1.读取到文件地末尾:</p>\n<p>2.读取一行字符:</p>\n<p>3.读取一行数字:</p>\n<h2 id="cin-cout-的使用">cin cout 的使用</h2>\n<p>要包含头文件:<code>&lt;iostream&gt;</code>,要写这句话:<code>using namespace std;</code></p>\n<p>cout语句的一般格式为：<code>cout&lt;&lt;表达式1&lt;&lt;表达式2&lt;&lt;……&lt;&lt;表达式n;</code></p>\n<p>cin语句的一般格式为：<code>cin&gt;&gt;变量1&gt;&gt;变量2&gt;&gt;……&gt;&gt;变量n;</code></p>\n<p>这里说一下对理解:把cout想像成cout 想象成console, <code>&lt;&lt;</code>表示一个流向,会把数据流向cout,而cout就是console,现时<code>&lt;&lt;</code>操作完后会返回cout,所以可以写成一个长链,cin同理,只不过把cin当成键盘.</p>\n<p>与printf相比,如果我想输出一行话,只要写一个长链串起来就可以了.</p>\n<pre><code><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"hello word"</span> &lt;&lt; <span class="hljs-number">10</span> &lt;&lt; <span class="hljs-string">\' \'</span> &lt;&lt; <span class="hljs-built_in">endl</span>;\n</code></pre><h3 id="cin-cout-控制符">cin cout 控制符</h3>\n<p><code>#include &lt;iomanip&gt;</code></p>\n<table>\n<thead>\n<tr>\n<th>cout 控制</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dec</td>\n<td>%d</td>\n</tr>\n<tr>\n<td>hex</td>\n<td>%x</td>\n</tr>\n<tr>\n<td>oct</td>\n<td>%o</td>\n</tr>\n<tr>\n<td>setfill(&#39;c&#39;)</td>\n<td>填充字符为c</td>\n</tr>\n<tr>\n<td>setw(n)</td>\n<td>宽度为n</td>\n</tr>\n<tr>\n<td>setprecision(b)</td>\n<td>浮点数小数部分长度为n</td>\n</tr>\n</tbody>\n</table>\n<h4 id="代码">代码</h4>\n<pre><code><span class="hljs-comment">/*一个按进制输出的例子*/</span>\n\n<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream.h&gt;</span></span>\n\n<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>\n\n</span>{\n\n<span class="hljs-keyword">int</span> x=<span class="hljs-number">30</span>, y=<span class="hljs-number">300</span>, z=<span class="hljs-number">1024</span>;\n\n<span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;z&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//按十进制输出</span>\n\n<span class="hljs-built_in">cout</span>.unsetf(ios::dec ); <span class="hljs-comment">//取消十进制输出设置</span>\n\n<span class="hljs-built_in">cout</span>.setf(ios::showbase | ios::uppercase); <span class="hljs-comment">//设置基指示符输出和数值中的字母大写输出</span>\n\n<span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;z&lt;&lt;<span class="hljs-built_in">endl</span>;\n\n<span class="hljs-built_in">cout</span>.unsetf(ios::showbase | ios::uppercase); <span class="hljs-comment">//取消基指示符输出和数值中的字母大写输出</span>\n\n<span class="hljs-built_in">cout</span>.setf(ios::oct); <span class="hljs-comment">//设置为八进制输出,此设置不取消一直有效</span>\n\n<span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;z&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//按八进制输出</span>\n\n<span class="hljs-built_in">cout</span>.setf(ios::showbase | ios::uppercase); <span class="hljs-comment">//设置基指示符输出和数值中的字母大写输出</span>\n\n<span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;z&lt;&lt;<span class="hljs-built_in">endl</span>;\n\n<span class="hljs-built_in">cout</span>.unsetf(ios::showbase | ios::uppercase); <span class="hljs-comment">//取消基指示符输出和数值中的字母大写输出</span>\n\n<span class="hljs-built_in">cout</span>.unsetf(ios::oct); <span class="hljs-comment">//取消八进制输出设置，恢复按十进制输出</span>\n\n<span class="hljs-built_in">cout</span>.setf(ios::hex); <span class="hljs-comment">//设置为十六进制输出</span>\n\n<span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;z&lt;&lt;<span class="hljs-built_in">endl</span>;\n\n<span class="hljs-built_in">cout</span>.setf(ios::showbase | ios::uppercase); <span class="hljs-comment">//设置基指示符输出和数值中的字母大写输出</span>\n\n<span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;z&lt;&lt;<span class="hljs-built_in">endl</span>;\n\n<span class="hljs-built_in">cout</span>.unsetf(ios::showbase | ios::uppercase); <span class="hljs-comment">//取消基指示符输出和数值中的字母大写输出</span>\n\n<span class="hljs-built_in">cout</span>.unsetf(ios::hex); <span class="hljs-comment">//取消十六进制输出设置，恢复按十进制输出</span>\n\n<span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">\' \'</span>&lt;&lt;z&lt;&lt;<span class="hljs-built_in">endl</span>;\n\n}\n</code></pre><p>##FAQ:算法竞赛的时候用cin cout输入输出比用scanf printf慢多少？</p>\n<ul>\n<li><a href="https://www.zhihu.com/question/27831271/answer/38379464">https://www.zhihu.com/question/27831271/answer/38379464</a></li>\n<li><a href="https://www.byvoid.com/blog/fast-readfile">https://www.byvoid.com/blog/fast-readfile</a></li>\n</ul>\n<h2 id="要善用网络">要善用网络</h2>\n',
  hash: '88384a9ffe3a121b11fda4e45ab329f2',
  categories: '课件',
  hashID: '09ab138d9bb680ac6b3d0c51285b5792',
  commentOn: true,
  Author: 'Rainboy' }
打开数据库成功!
